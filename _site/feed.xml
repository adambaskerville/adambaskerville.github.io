<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://adambaskerville.github.io/</id><title>Dr Adam Luke Baskerville</title><subtitle>The personal website of Adam Luke Baskerville Contains information and T>T blog containing mathematics and science content</subtitle> <updated>2025-07-02T14:07:21+01:00</updated> <author> <name>Adam Baskerville</name> <uri>https://adambaskerville.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://adambaskerville.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://adambaskerville.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Adam Baskerville </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>T>T: Turbocharging AM1BCC Charge Calculations</title><link href="https://adambaskerville.github.io/posts/am1bcc_speedup/" rel="alternate" type="text/html" title="T&amp;gt;T: Turbocharging AM1BCC Charge Calculations" /><published>2023-04-23T00:00:00+01:00</published> <updated>2025-07-02T13:20:58+01:00</updated> <id>https://adambaskerville.github.io/posts/am1bcc_speedup/</id> <content type="text/html" src="https://adambaskerville.github.io/posts/am1bcc_speedup/" /> <author> <name>Adam Baskerville</name> </author> <summary>The Problem AM1BCC charge calculations are painfully slow. A single ligand can take minutes instead of seconds, making high-throughput workflows impractical. The culprit? Unnecessary geometry optimisation. The Cause Most AM1BCC bottlenecks come from unnecessary geometry optimisation. AmberTools enables this by default without making it clear, so using standard settings triggers an expensive ...</summary> </entry> <entry><title>T>T: Buffon's Needle: Estimating π using Toothpicks</title><link href="https://adambaskerville.github.io/posts/BuffonNeedle/" rel="alternate" type="text/html" title="T&amp;gt;T: Buffon&amp;apos;s Needle: Estimating π using Toothpicks" /><published>2023-02-08T00:00:00+00:00</published> <updated>2025-04-14T00:15:46+01:00</updated> <id>https://adambaskerville.github.io/posts/BuffonNeedle/</id> <content type="text/html" src="https://adambaskerville.github.io/posts/BuffonNeedle/" /> <author> <name>Adam Baskerville</name> </author> <summary>Try the code yourself! Click the following button to launch an ipython notebook on Google Colab which implements the code developed in this post: The Problem Have you ever wondered if you could calculate \(\pi\) by simply dropping toothpicks on the floor? In the 18th century, French mathematician Georges-Louis Leclerc, Comte de Buffon, wondered exactly that. Not with toothpicks specificall...</summary> </entry> <entry><title>T>T: High-Precision Eigenvalue Computations Made Efficient in C++</title><link href="https://adambaskerville.github.io/posts/HighPrecisionEigenvalues/" rel="alternate" type="text/html" title="T&amp;gt;T: High-Precision Eigenvalue Computations Made Efficient in C++" /><published>2022-11-03T00:00:00+00:00</published> <updated>2024-06-09T13:49:33+01:00</updated> <id>https://adambaskerville.github.io/posts/HighPrecisionEigenvalues/</id> <content type="text/html" src="https://adambaskerville.github.io/posts/HighPrecisionEigenvalues/" /> <author> <name>Adam Baskerville</name> </author> <summary>The Problem The Schrödinger equation is at the heart of quantum mechanics serving as a foundation for understanding the behavior of subatomic systems. In the context of quantum chemistry we normally solve the stationary state, time independent, non-relativistic Schrödinger equation, TISE, given by [\hat{H}\Psi = E\Psi.] In most practical applications we formulate our problems as a generalise...</summary> </entry> <entry><title>T>T: Effortless Parallel For Loops in Python</title><link href="https://adambaskerville.github.io/posts/ForLoops/" rel="alternate" type="text/html" title="T&amp;gt;T: Effortless Parallel For Loops in Python" /><published>2022-08-26T00:00:00+01:00</published> <updated>2022-08-26T00:00:00+01:00</updated> <id>https://adambaskerville.github.io/posts/ForLoops/</id> <content type="text/html" src="https://adambaskerville.github.io/posts/ForLoops/" /> <author> <name>Adam Baskerville</name> </author> <summary>Try the code yourself! Click the following button to launch an ipython notebook on Google Colab which implements the code developed in this post: The Problem What is the easiest way to parallelize a for loop in Python? The Solution Using the joblib library. Consider the following, non-parallelized example where we generate a list of integers and calculate their factorials. There are bett...</summary> </entry> <entry><title>T>T: Compiling DearPyGui on Raspberry Pi 32-bit OS</title><link href="https://adambaskerville.github.io/posts/DearpyguiCompilation/" rel="alternate" type="text/html" title="T&amp;gt;T: Compiling DearPyGui on Raspberry Pi 32-bit OS" /><published>2022-06-03T00:00:00+01:00</published> <updated>2024-02-22T18:08:02+00:00</updated> <id>https://adambaskerville.github.io/posts/DearpyguiCompilation/</id> <content type="text/html" src="https://adambaskerville.github.io/posts/DearpyguiCompilation/" /> <author> <name>Adam Baskerville</name> </author> <summary>The Problem DearPyGui, available at https://github.com/hoffstadt/DearPyGui, is a robust and speedy Graphical User Interface (GUI) toolkit designed for Python, boasting minimal dependencies. I’ve been keen to integrate it as the primary library for my AstroPitography GUI. However, a hurdle emerged - it lacks compatibility with the 32-bit Buster Raspberry Pi operating system running on my RPi 3B...</summary> </entry> </feed>
